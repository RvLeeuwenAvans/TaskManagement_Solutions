// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagement.Infrastructure.Persistence;

#nullable disable

namespace TaskManagement.Infrastructure.Migrations
{
    [DbContext(typeof(TaskManagementDatabaseContext))]
    [Migration("20250621173605_SetupDatabaseMigration")]
    partial class SetupDatabaseMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TaskManagement.Domain.Office.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("OfficeCode")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfficeCode")
                        .IsUnique();

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.Relation.DamageClaim.DamageClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("DamageNumber")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("DamageNumberSub")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<Guid>("RelationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DamageNumber")
                        .IsUnique();

                    b.HasIndex("RelationId");

                    b.ToTable("DamageClaims");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.Relation.InsurancePolicy.InsurancePolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("PolicyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<Guid>("RelationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("PolicyNumber")
                        .IsUnique();

                    b.HasIndex("RelationId");

                    b.ToTable("InsurancePolicies");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.Relation.Relation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("char(36)");

                    b.Property<int>("RelationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RelationNumber")
                        .IsUnique();

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.User.Task.LinkedObject.LinkedObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DamageClaimId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("InsurancePolicyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("RelationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DamageClaimId");

                    b.HasIndex("InsurancePolicyId");

                    b.HasIndex("RelationId");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("LinkedObjects");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.User.Task.Note.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.User.Task.UserTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LinkedObjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OfficeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.Relation.DamageClaim.DamageClaim", b =>
                {
                    b.HasOne("TaskManagement.Domain.Office.Relation.Relation", "Relation")
                        .WithMany("DamageClaims")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.Relation.InsurancePolicy.InsurancePolicy", b =>
                {
                    b.HasOne("TaskManagement.Domain.Office.Relation.Relation", "Relation")
                        .WithMany("InsurancePolicies")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.Relation.Relation", b =>
                {
                    b.HasOne("TaskManagement.Domain.Office.Office", "Office")
                        .WithMany("Relations")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.User.Task.LinkedObject.LinkedObject", b =>
                {
                    b.HasOne("TaskManagement.Domain.Office.Relation.DamageClaim.DamageClaim", "DamageClaim")
                        .WithMany("LinkedObjects")
                        .HasForeignKey("DamageClaimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TaskManagement.Domain.Office.Relation.InsurancePolicy.InsurancePolicy", "InsurancePolicy")
                        .WithMany("LinkedObjects")
                        .HasForeignKey("InsurancePolicyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TaskManagement.Domain.Office.Relation.Relation", "Relation")
                        .WithMany("LinkedObjects")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TaskManagement.Domain.Office.User.Task.UserTask", "UserTask")
                        .WithOne("LinkedObject")
                        .HasForeignKey("TaskManagement.Domain.Office.User.Task.LinkedObject.LinkedObject", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageClaim");

                    b.Navigation("InsurancePolicy");

                    b.Navigation("Relation");

                    b.Navigation("UserTask");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.User.Task.Note.Note", b =>
                {
                    b.HasOne("TaskManagement.Domain.Office.User.Task.UserTask", "UserTask")
                        .WithMany("Notes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTask");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.User.Task.UserTask", b =>
                {
                    b.HasOne("TaskManagement.Domain.Office.User.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.User.User", b =>
                {
                    b.HasOne("TaskManagement.Domain.Office.Office", "Office")
                        .WithMany("Users")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.Office", b =>
                {
                    b.Navigation("Relations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.Relation.DamageClaim.DamageClaim", b =>
                {
                    b.Navigation("LinkedObjects");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.Relation.InsurancePolicy.InsurancePolicy", b =>
                {
                    b.Navigation("LinkedObjects");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.Relation.Relation", b =>
                {
                    b.Navigation("DamageClaims");

                    b.Navigation("InsurancePolicies");

                    b.Navigation("LinkedObjects");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.User.Task.UserTask", b =>
                {
                    b.Navigation("LinkedObject");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("TaskManagement.Domain.Office.User.User", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
