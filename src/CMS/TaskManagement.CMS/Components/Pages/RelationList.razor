@page "/offices/{OfficeId:guid}/relations"
@using TaskManagement.CMS.Services
@using TaskManagement.DTO.Office.Relation

@inject RelationService RelationService
@inject NavigationManager NavManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Relations</PageTitle>

<MudPaper Class="pa-4">

    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
        <MudText Typo="Typo.h5">Relations in Office</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@CreateRelation">
            <MudIcon Icon="@Icons.Material.Filled.Person"/>
            Add Relation
        </MudButton>
    </MudStack>

    <MudTable Items="_relations" Hover="true" Dense="true">
        <HeaderContent>
            <MudTh>First Name</MudTh>
            <MudTh>Last Name</MudTh>
            <MudTh>Relation Number</MudTh>
            <MudTh>Damage Claims</MudTh>
            <MudTh>Edit</MudTh>
            <MudTh>Delete</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.FirstName</MudTd>
            <MudTd>@context.LastName</MudTd>
            <MudTd>@context.RelationNumber</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                           OnClick="@(() => GoToDamageClaims(context.Id))">
                    Damage Claims
                </MudButton>
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Color="Color.Primary"
                               OnClick="@(() => EditRelation(context.Id))"/>
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="@(() => ConfirmDelete(context.Id))"/>
            </MudTd>
        </RowTemplate>
    </MudTable>

</MudPaper>

@code {
    [Parameter] public Guid OfficeId { get; set; }

    private List<RelationResponse> _relations = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _relations = (await RelationService.GetByOfficeAsync(OfficeId)).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load relations: {ex.Message}", Severity.Error);
        }
    }
    
    private void GoToDamageClaims(Guid relationId)
    {
        NavManager.NavigateTo($"/offices/{OfficeId}/relations/{relationId}/damageclaims");
    }

    private void CreateRelation()
    {
        NavManager.NavigateTo($"/offices/{OfficeId}/relations/create");
    }

    private void EditRelation(Guid relationId)
    {
        NavManager.NavigateTo($"/offices/{OfficeId}/relations/edit/{relationId}");
    }

    private async Task ConfirmDelete(Guid relationId)
    {
        var result = await DialogService.ShowMessageBox(
            "Delete Confirmation",
            "Are you sure you want to delete this relation?",
            yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            try
            {
                await RelationService.DeleteAsync(relationId);
                _relations = (await RelationService.GetByOfficeAsync(OfficeId)).ToList();
                Snackbar.Add("Relation deleted", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to delete relation: {ex.Message}", Severity.Error);
            }
        }
    }

}
