@inherits LayoutComponentBase
@using TaskManagement.CMS.Services.Authentication
@inject AuthenticationService AuthService
@inject NavigationManager NavManager
@inject IDialogService DialogService
@implements IDisposable

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

@if (AuthService.IsAuthenticated)
{
    <MudLayout>
        <MudAppBar Elevation="1">
            <MudText Typo="Typo.h5" Class="ml-3">Taskmanagement CMS</MudText>
            <MudSpacer/>
            <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle"/>
            <!-- User Menu -->
            <MudMenu Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" Dense="true">
                <MudMenuItem>
                    <div class="d-flex flex-column">
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Signed in as</MudText>
                        <MudText Typo="Typo.body1">@AuthService.CurrentUserEmail</MudText>
                    </div>
                </MudMenuItem>
                <MudDivider/>
                <MudMenuItem Icon="@Icons.Material.Filled.Logout" OnClick="@HandleLogout">
                    Sign Out
                </MudMenuItem>
            </MudMenu>
        </MudAppBar>
        <MudMainContent Class="pt-16 pa-4">
            @Body
        </MudMainContent>
    </MudLayout>
}
else
{
    <!-- Show login page or redirect to login -->
    @Body
}

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _isDarkMode;
    private MudTheme? _theme;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new MudTheme
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };

        // Subscribe to authentication state changes
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;

        // Redirect to login if not authenticated
        if (!AuthService.IsAuthenticated && !NavManager.Uri.EndsWith("/login"))
        {
            NavManager.NavigateTo("/login");
        }
    }

    private void OnAuthenticationStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleLogout()
    {
        var result = await DialogService.ShowMessageBox(
            "Sign Out",
            "Are you sure you want to sign out?",
            yesText: "Sign Out",
            cancelText: "Cancel"
        );

        if (result == true)
        {
            await AuthService.LogoutAsync();
        }
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    private string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

}