@page "/offices/{OfficeId:guid}/users"
@using TaskManagement.CMS.Services
@using TaskManagement.DTO.Office.User

@inject UserService UserService
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

<PageTitle>Users</PageTitle>

<MudPaper Class="pa-4">

    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
        <MudText Typo="Typo.h5">Users in Office</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@CreateUser">
            <MudIcon Icon="@Icons.Material.Filled.PersonAdd" />
            Add User
        </MudButton>
    </MudStack>

    <MudTable Items="_users" Hover="true" Dense="true">
        <HeaderContent>
            <MudTh>First Name</MudTh>
            <MudTh>Last Name</MudTh>
            <MudTh>Email</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.FirstName</MudTd>
            <MudTd>@context.LastName</MudTd>
            <MudTd>@context.Email</MudTd>
            <MudTd Align="Align.Center">
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Color="Color.Primary"
                               OnClick="@(() => EditUser(context.Id))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="@(() => ConfirmDelete(context.Id))" />
            </MudTd>
        </RowTemplate>
    </MudTable>

</MudPaper>

@code {
    [Parameter] public Guid OfficeId { get; set; }

    private List<UserResponse> _users = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _users = await UserService.GetByOfficeAsync(OfficeId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load users: {ex.Message}", Severity.Error);
        }
    }

    private void CreateUser()
    {
        NavManager.NavigateTo($"/offices/{OfficeId}/users/create");
    }

    private void EditUser(Guid userId)
    {
        NavManager.NavigateTo($"/offices/{OfficeId}/users/edit/{userId}");
    }
    
    private async Task ConfirmDelete(Guid userId)
    {
        var result = await DialogService.ShowMessageBox(
            "Delete Confirmation",
            "Are you sure you want to delete this user?",
            yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            try
            {
                await UserService.DeleteAsync(userId);
                _users = await UserService.GetByOfficeAsync(OfficeId);
                Snackbar.Add("User deleted", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to delete user: {ex.Message}", Severity.Error);
            }
        }
    }

    [Inject] IDialogService DialogService { get; set; } = null!;
}
